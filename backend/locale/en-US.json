{
  "error": {
    "captcha": {
      "error": "Captcha error",
      "expired": "Captcha has expired, please try again"
    },
    "data_rule": {
      "available_models": "Data rule available models do not exist",
      "exists": "Data rule already exists",
      "model_column_not_found": "Data rule model column does not exist",
      "model_not_found": "Data rule model does not exist",
      "not_found": "Data rule does not exist"
    },
    "data_scope": {
      "exists": "Data scope already exists",
      "not_found": "Data scope does not exist"
    },
    "demo_mode": "This operation is prohibited in demo mode",
    "dept": {
      "exists": "Department already exists",
      "exists_children": "Department has sub-departments, cannot be deleted",
      "exists_users": "Department has users, cannot be deleted",
      "not_found": "Department does not exist",
      "parent": {
        "not_found": "Parent department does not exist",
        "related_self_not_allowed": "Cannot associate itself as parent"
      }
    },
    "email_config_missing": "Missing email dynamic configuration, please check system parameter configuration - email configuration",
    "expires_and_expire_seconds_conflict": "Only one of expires and expire_seconds can be set",
    "file_type_unknown": "Unknown file type",
    "image": {
      "format_not_supported": "This image format is not supported",
      "size_exceeded": "Image exceeds maximum limit, please reselect"
    },
    "json_parse_failed": "JSON parsing failed",
    "language_not_found": "Current language pack is not initialized or does not exist",
    "limit_reached": "Request too frequent, please try again later",
    "menu": {
      "exists": "Menu already exists",
      "exists_children": "Menu has sub-menus, cannot be deleted",
      "not_found": "Menu does not exist",
      "parent": {
        "not_found": "Parent menu does not exist",
        "related_self_not_allowed": "Cannot associate itself as parent"
      }
    },
    "model_parse_failed": "Data model column dynamic parsing failed, please contact system administrator",
    "password": {
      "mismatch": "Password mismatch",
      "old_error": "Old password error",
      "required": "Password cannot be empty"
    },
    "permission_check_failed": "Permission verification failed, please contact system administrator",
    "plugin": {
      "already_installed": "This plugin is already installed",
      "code_generator": {
        "business_exists": "Code generation business already exists",
        "business_not_found": "Code generation business does not exist",
        "column_exists": "Code generation model column already exists",
        "column_name_exists": "Code generation model column name already exists",
        "column_not_found": "Code generation model column does not exist",
        "column_table_not_found": "Code generation model list does not exist",
        "table_business_exists": "Same database table business already exists",
        "table_not_found": "Database table does not exist"
      },
      "config": {
        "exists": "Parameter configuration already exists",
        "not_found": "Parameter configuration does not exist"
      },
      "dict": {
        "data": {
          "exists": "Dictionary data already exists",
          "not_found": "Dictionary data does not exist"
        },
        "type": {
          "exists": "Dictionary type already exists",
          "not_found": "Dictionary type does not exist"
        }
      },
      "disabled": "Plugin {plugin} is not enabled, please contact system administrator",
      "git_url_invalid": "Git repository URL format is invalid",
      "install_failed": "Plugin installation failed, please try again later",
      "not_found": "Plugin does not exist",
      "notice": {
        "not_found": "Notice announcement does not exist"
      },
      "zip_content_invalid": "Plugin zip content is invalid",
      "zip_invalid": "Plugin zip format is invalid",
      "zip_missing_files": "Missing required files in plugin zip"
    },
    "rate_limit_exceeded": "Request too frequent, please try again later",
    "refresh_token_expired": "Refresh Token has expired, please login again",
    "request_params_invalid": "Request parameters invalid: {message}",
    "role": {
      "exists": "Role already exists",
      "not_found": "Role does not exist"
    },
    "snowflake": {
      "cluster_id_invalid": "Cluster ID must be between 0-{max}",
      "node_id_invalid": "Node ID must be between 0-{max}",
      "system_time_error": "System time has regressed, refusing to generate ID until {last_timestamp}"
    },
    "sql": {
      "file_not_found": "SQL script file does not exist",
      "syntax_not_allowed": "SQL script file contains illegal operations, only SELECT and INSERT are allowed"
    },
    "task": {
      "celery_worker_unavailable": "Celery Worker is temporarily unavailable, please try again later",
      "crontab_invalid": "Crontab expression is invalid",
      "params_invalid": "Execution failed, task parameters are invalid",
      "result_not_found": "Task result does not exist",
      "schedule_not_found": "{name} schedule is empty!",
      "scheduler_exists": "Task scheduler already exists",
      "scheduler_not_found": "Task scheduler does not exist",
      "scheduler_type_invalid": "Unsupported schedule type: {type}"
    },
    "token": {
      "expired": "Token has expired",
      "invalid": "Token is invalid"
    },
    "upload_file_failed": "File upload failed",
    "user": {
      "dept_deleted": "User's department has been deleted, please contact system administrator",
      "dept_locked": "User's department has been locked, please contact system administrator",
      "locked": "User has been locked, please contact system administrator",
      "login_elsewhere": "This user has logged in elsewhere, please login again and change password in time",
      "no_menu": "User has not been assigned menu, please contact system administrator",
      "no_role": "User has not been assigned role, please contact system administrator",
      "not_found": "User does not exist",
      "not_staff": "User has been prohibited from backend management operations, please contact system administrator",
      "perm": {
        "edit_self_not_allowed": "Not allowed to modify own permissions",
        "type_not_found": "Permission type does not exist"
      },
      "role_locked": "User's role has been locked, please contact system administrator"
    },
    "username_exists": "Username already exists",
    "username_or_password_error": "Username or password error",
    "video": {
      "format_not_supported": "This video format is not supported",
      "size_exceeded": "Video exceeds maximum limit, please reselect"
    }
  },
  "pydantic": {
    "arguments_type": "Arguments must be a tuple, list or dict",
    "assertion_error": "Assertion failed, {error}",
    "bool_parsing": "Input should be a valid boolean, unable to interpret input",
    "bool_type": "Input should be a valid boolean",
    "bytes_too_long": "Data should have at most {max_length} bytes",
    "bytes_too_short": "Data should have at least {min_length} bytes",
    "bytes_type": "Input should be valid bytes",
    "callable_type": "Input should be a callable object",
    "dataclass_exact_type": "Input should be an instance of {class_name}",
    "dataclass_type": "Input should be a dict or an instance of {class_name}",
    "date_from_datetime_inexact": "Datetime provided to date should have zero time - e.g. be an exact date",
    "date_from_datetime_parsing": "Input should be a valid date or datetime, {error}",
    "date_future": "Date should be in the future",
    "date_past": "Date should be in the past",
    "date_parsing": "Input should be a valid date in YYYY-MM-DD format, {error}",
    "date_type": "Input should be a valid date",
    "datetime_future": "Input should be in the future",
    "datetime_object_invalid": "Invalid datetime object, got {error}",
    "datetime_past": "Input should be in the past",
    "datetime_parsing": "Input should be a valid datetime, {error}",
    "datetime_type": "Input should be a valid datetime",
    "decimal_max_digits": "Decimal input should have no more than {max_digits} digits in total",
    "decimal_max_places": "Decimal input should have no more than {decimal_places} decimal places",
    "decimal_parsing": "Input should be a valid decimal number",
    "decimal_type": "Decimal input should be an integer, float, string or Decimal object",
    "decimal_whole_digits": "Decimal input should have no more than {whole_digits} digits before the decimal point",
    "dict_type": "Input should be a valid dict",
    "email_parsing": "Input should be a valid email address, {error}",
    "email_type": "Input should be a valid email address",
    "enum": "Input should be {expected}",
    "extra_forbidden": "Extra inputs are not allowed",
    "finite_number": "Input should be a finite number",
    "float_parsing": "Input should be a valid number, unable to parse string as number",
    "float_type": "Input should be a valid number",
    "frozen_field": "Field is frozen",
    "frozen_instance": "Instance is frozen",
    "frozen_set_type": "Input should be a valid frozenset",
    "get_attribute_error": "Error getting attribute: {error}",
    "greater_than": "Input should be greater than {gt}",
    "greater_than_equal": "Input should be greater than or equal to {ge}",
    "int_from_float": "Input should be a valid integer, got a number with a decimal part",
    "int_parsing": "Input should be a valid integer, unable to parse string as integer",
    "int_parsing_size": "Unable to parse input string as integer, exceeds maximum size",
    "int_type": "Input should be a valid integer",
    "invalid_key": "Key should be a string",
    "is_instance_of": "Input should be an instance of {class}",
    "is_subclass_of": "Input should be a subclass of {class}",
    "iteration_error": "Error iterating object, error: {error}",
    "iterable_type": "Input should be iterable",
    "json_invalid": "Invalid JSON: {error}",
    "json_type": "JSON input should be a string, bytes or bytearray",
    "less_than": "Input should be less than {lt}",
    "less_than_equal": "Input should be less than or equal to {le}",
    "list_type": "Input should be a valid list",
    "literal_error": "Input should be {expected}",
    "mapping_type": "Input should be a valid mapping, error: {error}",
    "missing": "Field is required",
    "missing_argument": "Missing required argument",
    "missing_keyword_only_argument": "Missing required keyword-only argument",
    "missing_positional_only_argument": "Missing required positional-only argument",
    "model_attributes_type": "Input should be a valid dict or object with extractable fields",
    "model_type": "Input should be a valid dict or an instance of {class_name}",
    "multiple_argument_values": "Multiple values provided for argument",
    "multiple_of": "Input should be a multiple of {multiple_of}",
    "no_such_attribute": "Object has no attribute '{attribute}'",
    "none_required": "Input should be None",
    "recursion_loop": "Recursion error - circular reference detected",
    "set_type": "Input should be a valid set",
    "string_pattern_mismatch": "String should match pattern '{pattern}'",
    "string_sub_type": "Input should be a string, not an instance of a str subclass",
    "string_too_long": "String should have at most {max_length} characters",
    "string_too_short": "String should have at least {min_length} characters",
    "string_type": "Input should be a valid string",
    "string_unicode": "Input should be a valid string, unable to parse raw data as Unicode string",
    "time_delta_parsing": "Input should be a valid timedelta, {error}",
    "time_delta_type": "Input should be a valid timedelta",
    "time_parsing": "Input should be a valid time format, {error}",
    "time_type": "Input should be a valid time",
    "timezone_aware": "Input should contain timezone information",
    "timezone_naive": "Input should not contain timezone information",
    "timezone_offset": "Timezone offset should be {tz_expected}, got {tz_actual}",
    "too_long": "{field_type} should have at most {max_length} items after validation, not {actual_length}",
    "too_short": "{field_type} should have at least {min_length} items after validation, not {actual_length}",
    "tuple_type": "Input should be a valid tuple",
    "union_tag_invalid": "Input tag '{tag}' found using {discriminator} does not match any expected tags: {expected_tags}",
    "union_tag_not_found": "Unable to extract tag using discriminator {discriminator}",
    "unexpected_keyword_argument": "Unexpected keyword argument",
    "unexpected_positional_argument": "Unexpected positional argument",
    "url_parsing": "Input should be a valid URL, {error}",
    "url_scheme": "URL scheme should be {expected_schemes}",
    "url_syntax_violation": "Input violates strict URL syntax rules, {error}",
    "url_too_long": "URL should have at most {max_length} characters",
    "url_type": "URL input should be a string or URL",
    "uuid_parsing": "Input should be a valid UUID, {error}",
    "uuid_type": "UUID input should be a string, bytes or UUID object",
    "uuid_version": "Expected UUID version to be {expected_version}",
    "value_error": "Value error, {error}"
  },
  "response": {
    "error": "Request error",
    "server_error": "Server internal error",
    "success": "Request success"
  },
  "success": {
    "login": {
      "oauth2_success": "Login success (OAuth2)",
      "success": "Login success"
    },
    "plugin": {
      "install_success": "Plugin {plugin_name} installed successfully, please refer to the plugin documentation (README.md) for related configuration and restart the service",
      "uninstall_success": "Plugin {plugin_name} uninstalled successfully, please remove related configuration according to the plugin documentation (README.md) and restart the service"
    }
  }
}